<div class="row">
  <div class="col-md-8 col-md-offset-2">
    <h1>it's a blog</h1>
    <hr/>
  </div>
</div>

<div class="row">
  <div class="col-md-2">
  </div>
  <div class="col-md-6">
    <h3>Bezier explained - June 28, 2014</h3>
    <hr/>
    Yesterday I was learning how to use "Processing", the graphical programming
    language, and I realized that I really wanted to know how "bezier" curves work.
    <br/>
    <br/>
    It turns out they're not that hard to figure out. They're defined by four
    points, as start, an end, and two "control points". Take a look (click for
    random examples):
    <br/>
    <br/>
    <canvas id="processing-canvas"></canvas>

    <script id="sketch" type="application/processing" data-processing-target="processing-canvas">
class Point {
  int x; int y;

  Point(int x_, int y_){
    x = x_;
    y = y_;
  }

  void display() {
    fill(255);
    ellipseMode(CENTER);
    ellipse(x,y,5,5);
  }

  void update(int x_, int y_){
    x = x_;
    y = y_;
  }
}

Point p1,p2,p3,p4;

void setup() {
  size(640,480);
  stroke(255);
  smooth();
  p1 = new Point(70,420);
  p2 = new Point(60,100);
  p3 = new Point(550,60);
  p4 = new Point(600,380);
}

void draw() {
  background(0);
  float p = mouseX/640.;
  explainBezier(p1,p2,p3,p4,p);
}

void explainBezier(Point p1, Point p2, Point p3, Point p4,float p) {
  //Draw curve
  noFill();
  strokeWeight(3);
  bezier(p1.x,p1.y,p2.x,p2.y,p3.x,p3.y,p4.x,p4.y);

  strokeWeight(1);
  // 1st scaffold
  line(p1.x,p1.y,p2.x,p2.y);
  Point p5 = linearInterpolate(p1,p2,p);

  line(p2.x,p2.y,p3.x,p3.y);
  Point p6 = linearInterpolate(p2,p3,p);

  line(p3.x,p3.y,p4.x,p4.y);
  Point p7 = linearInterpolate(p3,p4,p);

  // 2nd scaffold
  line(p5.x,p5.y,p6.x,p6.y);
  Point p8 = linearInterpolate(p5,p6,p);

  line(p6.x,p6.y,p7.x,p7.y);
  Point p9 = linearInterpolate(p6,p7,p);

  // 3rd scaffold
  line(p8.x,p8.y,p9.x,p9.y);
  Point p10 = linearInterpolate(p8,p9,p);

  Point[] ps = {p1,p2,p3,p4,p5,p6,p7,p8,p9,p10};
  for (int i = 0; i < ps.length; i++) {
    ps[i].display();
  }

}

Point linearInterpolate(Point p1, Point p2, float p) {
  int x =  (int) ((float) p1.x * (1-p) + (float) p2.x * p);
  int y =  (int) ((float) p1.y * (1-p) + (float) p2.y * p); 
  return new Point(x,y);
}

void mousePressed() {
  p1.update((int)random(50,width - 50),(int)random(50,height - 50));
  p2.update((int)random(50,width - 50),(int)random(50,height - 50));
  p3.update((int)random(50,width - 50),(int)random(50,height - 50));
  p4.update((int)random(50,width - 50),(int)random(50,height - 50));
}
    </script>
    <br/>
    <br/>
    It turns out there's nothing tricky going on at all. WYSIWYG: The curve is
    defined by a sequence of proportionally divided line segments. Draw three line
    line segments between the end points and control points. Pick a proportion, and
    draw points on those line segments at that proportion. Draw two more line
    segments between your three new points and divide using the same proportion.
    Connect your final two points. The bezier curve is tangent to the point at that
    same proportion along a line segment containing the final two points.
    <br/>
    <br/>
  </div>
  <div class="col-md-4">
  </div>
</div>
